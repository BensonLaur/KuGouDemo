#ifndef LYRICWIDGET_H
#define LYRICWIDGET_H
/**
   @brief：this class is used to lyric widget which can be scrolled automatically
   @date:2017年7月30日 11:10:42
   @author:yantao
   @details:QQ:842420717
*/

#include <QWidget>
#include <Qmap>
#include <QDebug>
#include <QPainter>
#include <QTimer>
#include <QFile>
#include <QOpenGLWidget>
#include "baseWidget.h"

struct ItemInfo{
    int index;
    int alpha;
    int Y;
    bool hightLight;
    QString strText;
};

class LyricWidget : public baseWidget
{
    Q_OBJECT

public:
    LyricWidget(QWidget *parent = 0);
    ~LyricWidget();

//get current Row lrc by index

    QString GetLrcByIndex(int index);

//get the lrc by time
    QString GetLrcByTime(qint64 time);

//get index by time
    int GetIndexByTime(qint64 time);

//get mask length
    void GetMaskLen(qint64 pos,int nFontSize,int nFreq);
//-----------------original function------------
public:
    void analyzeLrcContent(QByteArray&,const QString &filePath=NULL);

    void getPosInfo(qint64 pos,int &interval,float &precent,QString &str,int index);
    inline  qint64 getPostion(int index){return index>=0&&index <m_lrcMap.values().size()?m_lrcMap.keys().at(index):0;}

    QString m_filedir;
    QMap<qint64,QMap<qint64,qint64>> m_lrcintervalmap;
    QMap<qint64,QMap<qint64,QString>> m_lrcwordsmap;

protected:
    virtual void paintEvent(QPaintEvent*event);
private slots:
    void slot_timer();

    void positionChanged(qint64 length);
private:
//Draw single row text

    void DrawItem(QPainter&Painter,ItemInfo &index);


    QTimer m_timer;
    QFont m_normalFont;
    QMap<qint64,QString> m_lrcMap;
    qint64 m_nCurPos;
    float m_nMaskLen;
    int m_nCurIndex;
    int m_nSroIndex;
    int m_nOffset;
    int m_nFontPixSize;
    QColor m_HLColor;   //hightlight
    QColor m_NlColor;   //normal
};

#endif // LYRICWIDGET_H
